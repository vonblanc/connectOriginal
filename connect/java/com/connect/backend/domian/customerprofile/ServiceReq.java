package com.connect.backend.domian.customerprofile;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import static com.connect.backend.service.OfyService.ofy;

import com.connect.backend.authenticators.FireAuth;
import com.connect.backend.domian.seprofile.Profile;
import com.connect.backend.domian.seprofile.ServiceOffered;
import com.connect.backend.domian.utilities.WrappedBoolean;
import com.connect.backend.domian.utilities.queries.GeneralQueryUtils;
import com.connect.backend.forms.ServiceReqForms;
import com.google.api.server.spi.config.AnnotationBoolean;
import com.google.api.server.spi.config.ApiResourceProperty;
import com.google.api.server.spi.response.NotFoundException;
import com.google.appengine.repackaged.com.google.api.client.util.Preconditions;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.Work;
import com.googlecode.objectify.annotation.Entity;
import com.googlecode.objectify.annotation.Id;
import com.googlecode.objectify.annotation.Index;
import com.googlecode.objectify.annotation.Parent;
@Entity
public class ServiceReq{
	public static final Logger logger=Logger.getLogger(FireAuth.class.getName());

//There should be two types of possible service request (With interested service People expecting a reply) and (With service offered when you have your favourite servicePerson)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	@Id
	private long id;
	
	@Parent
	@ApiResourceProperty(ignored = AnnotationBoolean.TRUE)
	private Key<Client> parentKey;
	
	private List<String> webSafeServicePeopleKeys;  //string keys of interested service people version
	
	private List<ServiceOffered> servicesOfInterest;    //The service you are interested if you are making a single request to a customer

	
	private String serviceDescription;        //description of service needed, to be provided by customer 
	
	private String dateOfRequest;                  //automatically generated by constructor
	
	private  String serviceStartDay;    //to be provided by customer
	
	private String resposeDeadlineTime;     //to be calculated by constructor
	
	private String webSafeServiceReqKey; //servicReq
	
	private int unavailableProfiles=0;   // number of unavailableprofiles in list of interested service people when sending the request
	


	
	public ServiceReq(){};
	
	
	public ServiceReq(long id, String webSafeClientKey, ServiceReqForms serviceReqForms,List<String> webSafeServicePeopleKeys){
		
		
		
		Preconditions.checkNotNull(serviceReqForms.getServiceStartDay(), "Start date can't be null");
		Preconditions.checkNotNull(serviceReqForms.getServiceDescription(), "Description of service wanted can't be null");
		Preconditions.checkNotNull(webSafeServicePeopleKeys, "SE personel profile keys must be sent too");
	    Preconditions.checkNotNull(serviceReqForms.getServiceStartDay(), "Service start day is necessary");
		
        this.id=id;
		
		this.parentKey=Key.create(webSafeClientKey);  //assign the parent key
		
		
		
		this.webSafeServicePeopleKeys=webSafeServicePeopleKeys;
		
		
		
		
		this.serviceStartDay=GeneralQueryUtils.TimeUtils.checkDateStrings(serviceReqForms.getServiceStartDay());
		
		this.serviceDescription=serviceReqForms.getServiceDescription();
		
		this.webSafeServiceReqKey=Key.create(parentKey,ServiceReq.class, id).getString();
		
		Date date=new Date();
		this.dateOfRequest=GeneralQueryUtils.TimeUtils.simpleDateFormat.format(date); //get the current date 
		
		this.resposeDeadlineTime=calcResponseDeadline();     //calculate the deadline time 
		
		WrappedBoolean result;
		
		result=sendRequests();   //*******to do give wrapped boolean a string and log the returned boolean outcome
		
		logger.log(Level.SEVERE, result.toString());
			
	}
	
	
	public ServiceReq(long id, String webSafeClientKey,  List<ServiceOffered> servicesOffered, ServiceReqForms serviceReqForms) throws NotFoundException{
		
		Preconditions.checkNotNull(serviceReqForms.getServiceStartDay(), "Start date can't be null");
		Preconditions.checkNotNull(servicesOfInterest, "SE personel profile keys must be sent too");
	    Preconditions.checkNotNull(serviceReqForms.getServiceStartDay(), "Service start day is necessary");
		
        this.id=id;
		
		this.parentKey=Key.create(webSafeClientKey);  //assign the parent key
		
		this.serviceStartDay=GeneralQueryUtils.TimeUtils.checkDateStrings(serviceReqForms.getServiceStartDay()); //get start day from form

		
		
		StringBuilder stringBuilder= new StringBuilder();
		
		
		
		for(ServiceOffered serviceOffered: servicesOffered) 
			{    
			   stringBuilder=GeneralQueryUtils.WordUtils.singlefyStringList(stringBuilder,serviceOffered.getServiceDescription());
			
			}
		
		this.serviceDescription=stringBuilder.toString();
		this.servicesOfInterest=servicesOffered;
		this.webSafeServiceReqKey=Key.create(parentKey,ServiceReq.class, id).getString();  //do everything in the create service request from multiple profile keys 
		Date date=new Date();
		this.dateOfRequest=GeneralQueryUtils.TimeUtils.simpleDateFormat.format(date);
		
		String profileKeyString=servicesOfInterest.get(0).getParentKey().getString(); //get the first 
		
		this.webSafeServicePeopleKeys= new ArrayList<>();   // create websafeprofileKeys in class since nothing is passed into the constructor 
		
		webSafeServicePeopleKeys.add(profileKeyString);    ///add profile string to list of service people 
		
		WrappedBoolean result;
		
		result=sendRequests();        //send the request to webSafeServicePeopleKeys(which is one service person gotten from the list of interested services)
		
		logger.log(Level.SEVERE, result.toString());
		
		
		
		
	}
	
	private String calcResponseDeadline()
	{
		int interval=GeneralQueryUtils.TimeUtils.dateInterval(this.dateOfRequest, this.serviceStartDay); // calculate the time interval between dateOfrequest and serviceStartDay
		
		double inter=(double) interval;           ///convert to double so we can calculate percentages
		
		inter=inter*0.2;                           //get 20%  of the double value
		
		String dateEstimate=GeneralQueryUtils.TimeUtils.dateFowardEst(this.dateOfRequest,(int)inter);  //call method to forward calculate date from duration 
		
		return dateEstimate;
	}
	
	@ApiResourceProperty(ignored = AnnotationBoolean.TRUE)
	public WrappedBoolean sendRequests()
	{
		
		final List<Key<Profile>>servicePeopleKeys= new ArrayList<>();
		
		for(String iterate: webSafeServicePeopleKeys)
		{
			Key<Profile> proflie=Key.create(iterate);
			servicePeopleKeys.add(proflie);
			
		}
		
		WrappedBoolean requestStatus=ofy().transact(new Work<WrappedBoolean>() {
			
			
			@Override
			public WrappedBoolean run(){
				
				
				Collection<Profile> loadedProfileKeys=ofy().load().keys(servicePeopleKeys).values();
				if(loadedProfileKeys==null) return new WrappedBoolean(false,"There are no SE profiles to send to");
				 
				
				List<Profile> profiles= new ArrayList<>(loadedProfileKeys);  //create list of profiles from collection of loadedproiles
				
				 Key<ServiceReq> requestKey=Key.create(ServiceReq.class,id);
				 
				
				for(Profile iterate:profiles)

				{  	
					boolean status=false;

					
				   if(iterate!=null) status=iterate.addServiceRequest(requestKey);
				   if(iterate==null||status==false)	unavailableProfiles++;
					
				}
				
				    ofy().save().entities(profiles);
					
					
			     
				
				return new WrappedBoolean(true, "Service request transaction Sucessful, unavailable profiles is "+  unavailableProfiles);
				
				
			}
			
			
			
		});
		
		
		return requestStatus;
	}
	
	


	public String getServiceDescription(){return serviceDescription;}
	public String getDateOfRequest(){return dateOfRequest;}
	public String getServiceStarDay(){return serviceStartDay;}
	public String getResponseDeadlineTime(){return resposeDeadlineTime;}
	public List<String>getWebSafeServicePeopleKeys(){return webSafeServicePeopleKeys;}
	public String getWebSafeServiceReqKey(){return webSafeServiceReqKey;}
	public int getUnavailableProfiles(){return unavailableProfiles;}
}